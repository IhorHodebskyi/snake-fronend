{"version":3,"file":"static/js/994.0007ae6f.chunk.js","mappings":"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","sources":["components/GamePieces/GamePieces.styled.jsx","components/GamePieces/GamePieces.jsx","components/GameState/GameState.styled.jsx","redux/game/selectors.js","components/GameState/GameState.jsx","pages/Game.stayled.jsx","pages/Game.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const GameCanvas = styled.canvas`\n\tbackground-color: #ecf0f1;\n\tborder: 2px solid #90caf9;\n`;\n","import { useEffect, useRef, useState } from \"react\";\nimport { GameCanvas } from \"./GamePieces.styled\";\n\nconst GamePieces = ({ score, setScore, onGameOver }) => {\n\tconst [pause, setPause] = useState(false);\n\tconst canvasRef = useRef();\n\tconst SNAKE_SPEED = 10;\n\tconst [apple, setApple] = useState({ x: 180, y: 100 });\n\tconst [snake, setSnake] = useState([\n\t\t{ x: 100, y: 50 },\n\t\t{ x: 95, y: 50 },\n\t]);\n\tconst [direction, setDirection] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst ctx = canvas.getContext(\"2d\");\n\n\t\tconst newWindow = callBeck => {\n\t\t\twindow.addEventListener(\"keydown\", callBeck);\n\t\t};\n\n\t\tconst takeBreak = e => {\n\t\t\tif (e.key === \" \") {\n\t\t\t\tsetPause(!pause);\n\t\t\t\tsetDirection(null);\n\t\t\t}\n\t\t};\n\n\t\tnewWindow(takeBreak);\n\n\t\tif (!pause) {\n\t\t\tconst drawSnake = () => {\n\t\t\t\tsnake.forEach(snakePart => {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.rect(snakePart.x, snakePart.y, 14, 14);\n\t\t\t\t\tctx.fillStyle = \"#90ee90\";\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tctx.closePath();\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst draftApple = () => {\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(apple.x, apple.y, 14, 14);\n\t\t\t\tctx.fillStyle = \"#ff0000\";\n\t\t\t\tctx.fill();\n\t\t\t\tctx.closePath();\n\t\t\t};\n\n\t\t\tconst moveSnake = () => {\n\t\t\t\tif (direction) {\n\t\t\t\t\tsetSnake(prevSnake => {\n\t\t\t\t\t\tconst newSnake = [...prevSnake];\n\t\t\t\t\t\tconst snakeHead = {\n\t\t\t\t\t\t\tx: newSnake[0].x,\n\t\t\t\t\t\t\ty: newSnake[0].y,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tfor (let i = newSnake.length - 1; i > 0; i--) {\n\t\t\t\t\t\t\tnewSnake[i].x = newSnake[i - 1].x;\n\t\t\t\t\t\t\tnewSnake[i].y = newSnake[i - 1].y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (direction) {\n\t\t\t\t\t\t\tcase \"right\":\n\t\t\t\t\t\t\t\tsnakeHead.x += SNAKE_SPEED;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"left\":\n\t\t\t\t\t\t\t\tsnakeHead.x -= SNAKE_SPEED;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"up\":\n\t\t\t\t\t\t\t\tsnakeHead.y -= SNAKE_SPEED;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"down\":\n\t\t\t\t\t\t\t\tsnakeHead.y += SNAKE_SPEED;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewSnake[0] = snakeHead;\n\t\t\t\t\t\thandleAppleCollision(newSnake);\n\t\t\t\t\t\thandleWallCollision(snakeHead);\n\t\t\t\t\t\thandleBodyCollision(newSnake);\n\n\t\t\t\t\t\treturn newSnake;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst handleWallCollision = snakeHead => {\n\t\t\t\tif (\n\t\t\t\t\tsnakeHead.x + SNAKE_SPEED > canvas.width ||\n\t\t\t\t\tsnakeHead.x + SNAKE_SPEED < 0\n\t\t\t\t) {\n\t\t\t\t\tonGameOver(\"wall\");\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tsnakeHead.y + SNAKE_SPEED > canvas.height ||\n\t\t\t\t\tsnakeHead.y < 0\n\t\t\t\t) {\n\t\t\t\t\tonGameOver(\"wall\");\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst handleBodyCollision = newSnake => {\n\t\t\t\tconst snakeHead = newSnake[0];\n\t\t\t\tfor (let i = 1; i < newSnake.length; i++) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tsnakeHead.x === newSnake[i].x &&\n\t\t\t\t\t\tsnakeHead.y === newSnake[i].y\n\t\t\t\t\t) {\n\t\t\t\t\t\tonGameOver(\"self\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst handleAppleCollision = newSnake => {\n\t\t\t\tconst snakeHead = newSnake[0];\n\n\t\t\t\tif (\n\t\t\t\t\tsnakeHead.x === apple.x &&\n\t\t\t\t\tsnakeHead.y === apple.y\n\t\t\t\t) {\n\t\t\t\t\tsetScore(++score);\n\n\t\t\t\t\tsetApple({\n\t\t\t\t\t\tx:\n\t\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\t\t(Math.random() * canvas.width) /\n\t\t\t\t\t\t\t\t\tSNAKE_SPEED,\n\t\t\t\t\t\t\t) * SNAKE_SPEED,\n\t\t\t\t\t\ty:\n\t\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\t\t(Math.random() * canvas.height) /\n\t\t\t\t\t\t\t\t\tSNAKE_SPEED,\n\t\t\t\t\t\t\t) * SNAKE_SPEED,\n\t\t\t\t\t});\n\n\t\t\t\t\tnewSnake.push({\n\t\t\t\t\t\tx: newSnake[newSnake.length - 1].x,\n\t\t\t\t\t\ty: newSnake[newSnake.length - 1].y,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst handleKeyPress = e => {\n\t\t\t\tswitch (e.key) {\n\t\t\t\t\tcase \"ArrowRight\":\n\t\t\t\t\t\tsetDirection(\"right\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"ArrowLeft\":\n\t\t\t\t\t\tsetDirection(\"left\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"ArrowUp\":\n\t\t\t\t\t\tsetDirection(\"up\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"ArrowDown\":\n\t\t\t\t\t\tsetDirection(\"down\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tnewWindow(handleKeyPress);\n\n\t\t\tconst intervale = setInterval(() => {\n\t\t\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\t\t\tdrawSnake();\n\t\t\t\tdraftApple();\n\t\t\t\tmoveSnake();\n\t\t\t}, 100);\n\n\t\t\treturn () => {\n\t\t\t\tclearInterval(intervale);\n\t\t\t};\n\t\t}\n\t}, [\n\t\tapple,\n\t\tdirection,\n\t\tonGameOver,\n\t\tpause,\n\t\tscore,\n\t\tsetScore,\n\t\tsnake,\n\t]);\n\n\treturn (\n\t\t<div>\n\t\t\t{pause && <p>pause</p>}\n\t\t\t<GameCanvas\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={750}\n\t\t\t\theight={420}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default GamePieces;\n","import styled from \"styled-components\";\n\nexport const GameContainer = styled.div`\n\tdisplay: flex\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n`;\nexport const Score = styled.p`\n\tcolor: #1e88e5;\n\tfont-size: 24px;\n`;\nexport const HighScore = styled.p`\n\tcolor: #e74c3c;\n\tfont-size: 18px;\n`;\n\nexport const GameOver = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n\ttext-align: center;\n\tcolor: #e74c3c;\n\tfont-size: 24px;\n\tmargin-top: 20px;\n`;\n","export const selectGameIsLoading = state =>\n\tstate.game.isLoading;\n\nexport const selectError = state => state.game.error;\n\nexport const selectGame = state => state.game.items;\n","import GamePieces from \"components/GamePieces/GamePieces\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n\tGameContainer,\n\tGameOver,\n\tHighScore,\n\tScore,\n} from \"./GameState.styled\";\n\nimport { updateResult } from \"redux/game/operations\";\nimport { selectUser } from \"redux/auth/selectors\";\nimport { selectGame } from \"redux/game/selectors\";\n\nconst GameState = () => {\n\tconst dispatch = useDispatch();\n\tconst [score, setScore] = useState(0);\n\n\tconst [gameOver, setGameOver] = useState(false);\n\tconst [collisionType, setCollisionType] = useState(null);\n\tconst { highScore } = useSelector(selectUser);\n\tconst items = useSelector(selectGame);\n\n\tconst handleGameOver = type => {\n\t\tsetGameOver(true);\n\n\t\tif (score > highScore) {\n\t\t\tdispatch(updateResult(score));\n\t\t}\n\n\t\tsetCollisionType(type);\n\t};\n\n\tconst handleResetGame = () => {\n\t\tsetScore(0);\n\t\tsetGameOver(false);\n\t};\n\n\tuseEffect(() => {\n\t\tconst handleKeyPress = e => {\n\t\t\tif (gameOver && e.key === \"Enter\") {\n\t\t\t\thandleResetGame();\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener(\"keydown\", handleKeyPress);\n\t}, [gameOver]);\n\n\treturn (\n\t\t<GameContainer>\n\t\t\t<Score className=\"score\">Score: {score}</Score>\n\t\t\t<HighScore>High Score: {highScore}</HighScore>\n\t\t\t{gameOver && (\n\t\t\t\t<GameOver>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tGame Over!{\" \"}\n\t\t\t\t\t\t{collisionType === \"wall\"\n\t\t\t\t\t\t\t? \"You Hit the wall\"\n\t\t\t\t\t\t\t: \"You Ate yourself\"}\n\t\t\t\t\t\t!\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>Press Enter to reset the game</p>\n\t\t\t\t\t<p>Records</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{items.map(({ id, name, highScore }) => (\n\t\t\t\t\t\t\t<li key={id}>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t{name}:{highScore}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</GameOver>\n\t\t\t)}\n\t\t\t{!gameOver && (\n\t\t\t\t<GamePieces\n\t\t\t\t\tscore={score}\n\t\t\t\t\tsetScore={setScore}\n\t\t\t\t\tonGameOver={type => handleGameOver(type)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</GameContainer>\n\t);\n};\n\nexport default GameState;\n","import styled from \"styled-components\";\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n`;\n","import GameState from \"components/GameState/GameState\";\nimport { Wrapper } from \"./Game.stayled\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchResults } from \"redux/game/operations\";\n\nconst Game = () => {\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tdispatch(fetchResults());\n\t}, [dispatch]);\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<GameState />\n\t\t</Wrapper>\n\t);\n};\n\nexport default Game;\n"],"names":["GameCanvas","styled","_templateObject","_taggedTemplateLiteral","_ref","score","setScore","onGameOver","_useState","useState","_useState2","_slicedToArray","pause","setPause","canvasRef","useRef","SNAKE_SPEED","_useState3","x","y","_useState4","apple","setApple","_useState5","_useState6","snake","setSnake","_useState7","_useState8","direction","setDirection","useEffect","canvas","current","ctx","getContext","newWindow","callBeck","window","addEventListener","e","key","handleWallCollision","snakeHead","width","height","handleBodyCollision","newSnake","i","length","handleAppleCollision","Math","floor","random","push","intervale","setInterval","clearRect","forEach","snakePart","beginPath","rect","fillStyle","fill","closePath","prevSnake","_toConsumableArray","clearInterval","_jsxs","children","_jsx","ref","GameContainer","Score","_templateObject2","HighScore","_templateObject3","GameOver","_templateObject4","selectGame","state","game","items","dispatch","useDispatch","gameOver","setGameOver","collisionType","setCollisionType","highScore","useSelector","selectUser","className","map","id","name","GamePieces","type","updateResult","handleGameOver","Wrapper","fetchResults","GameState"],"sourceRoot":""}